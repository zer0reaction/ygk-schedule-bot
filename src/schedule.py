import json
from database import get_user_group_id, get_group_row
from web import get_html_text_first, get_html_text_second, get_web_date, get_changes, get_web_week_type
from datetime import datetime
from constants import *

# Returns formatted text for one day (without day name)
def get_day_schedule_text(day_dict: dict) -> str:
    text = ""
    emojis = ['0Ô∏è‚É£', '1Ô∏è‚É£', '2Ô∏è‚É£', '3Ô∏è‚É£', '4Ô∏è‚É£', '5Ô∏è‚É£', '6Ô∏è‚É£', '7Ô∏è‚É£', '8Ô∏è‚É£', '9Ô∏è‚É£']
    keys = day_dict.keys()

    # TODO: this is not a good way to do it. needs to be sorted in the first place
    for i in range(10):
        day_key = str(i)
        if day_key in keys:
            text += emojis[int(day_key)]
            text += " <b>[{}]</b> ".format(day_dict[day_key][2])
            text += "<i>{}</i> ".format(day_dict[day_key][0])
            text += "({})".format(day_dict[day_key][1])
            text += '\n'

    return text

# Returns formatted text of constant schedule
def get_week_schedule_text(group_id: int) -> str:
    group_row = get_group_row(group_id)
    if group_row[0] == ERROR_DATABASE:
        return "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫..."
    group_row = group_row[1]

    # TODO: fix potential bug
    # file can be missing
    with open("./db/groups/" + group_row[2], "r") as json_file:
        week_dict = json.load(json_file)

    if group_row[3] == "first":
        html_text = get_html_text_first()
    elif group_row[3] == "second":
        html_text = get_html_text_second()
    else:
        return "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫..."

    if html_text[0] == ERROR_WEB:
        return "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫..."
    html_text = html_text[1]

    week_type = get_web_week_type(html_text)
    if week_type[0] == ERROR_WEB:
        return "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫..."
    week_type = week_type[1]

    if week_type == "ch":
        text = "<b>–ß–∏—Å–ª–∏—Ç–µ–ª—å</b>\n\n"
    elif week_type == "zn":
        text = "<b>–ó–Ω–∞–º–µ–Ω–∞—Ç–µ–ª—å</b>\n\n"

    text += "üî¥ –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫\n" + get_day_schedule_text(week_dict["mon"][week_type]) + '\n'
    text += "üü† –í—Ç–æ—Ä–Ω–∏–∫\n" +     get_day_schedule_text(week_dict["tue"][week_type]) + '\n'
    text += "üü° –°—Ä–µ–¥–∞\n" +       get_day_schedule_text(week_dict["wed"][week_type]) + '\n'
    text += "üü¢ –ß–µ—Ç–≤–µ—Ä–≥\n" +     get_day_schedule_text(week_dict["thu"][week_type]) + '\n'
    text += "üîµ –ü—è—Ç–Ω–∏—Ü–∞\n" +     get_day_schedule_text(week_dict["fri"][week_type]) + '\n'
    text += "üü£ –°—É–±–±–æ—Ç–∞\n" +     get_day_schedule_text(week_dict["sat"][week_type])

    return text

def get_changed_day_text(group_id: int) -> str:
    group_row = get_group_row(group_id)
    if group_row[0] == ERROR_DATABASE:
        return "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫..."
    group_row = group_row[1]

    if group_row[3] == "first":
        html_text = get_html_text_first()
    elif group_row[3] == "second":
        html_text = get_html_text_second()
    else:
        return "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫..."

    if html_text[0] == ERROR_WEB:
        return "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫..."
    html_text = html_text[1]

    week_type = get_web_week_type(html_text)
    if week_type[0] == ERROR_WEB:
        return "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫..."
    week_type = week_type[1]

    if week_type == "ch":
        text = "<b>–ß–∏—Å–ª–∏—Ç–µ–ª—å</b>\n\n"
    elif week_type == "zn":
        text = "<b>–ó–Ω–∞–º–µ–Ω–∞—Ç–µ–ª—å</b>\n\n"

    changes = get_changes(html_text)
    # TODO: fix potential bug
    # date can be invalid or crash
    date = get_web_date(html_text)

    # TODO: fix potential bug
    # file can be missing
    with open("./db/groups/" + group_row[2], "r") as json_file:
        week_dict = json.load(json_file)

    match date.weekday():
        case 0:
            day_name = "mon"
            day_display_name = "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫"
        case 1:
            day_name = "tue"
            day_display_name = "–í—Ç–æ—Ä–Ω–∏–∫"
        case 2:
            day_name = "wed"
            day_display_name = "–°—Ä–µ–¥–∞"
        case 3:
            day_name = "thu"
            day_display_name = "–ß–µ—Ç–≤–µ—Ä–≥"
        case 4:
            day_name = "fri"
            day_display_name = "–ü—è—Ç–Ω–∏—Ü–∞"
        case 5:
            day_name = "sat"
            day_display_name = "–°—É–±–±–æ—Ç–∞"
        case _:
            return "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫..."

    day_dict = week_dict[day_name][week_type]

    for change in changes:
        # TODO: this does not work with autogenerated names
        if group_row[1] in change["group_name"]:
            pairs_string = change["pair_number"]
            pair_numbers = []

            if ',' in pairs_string:
                pair_numbers = pairs_string.split(',')
            elif '-' in pairs_string:
                split = pairs_string.split('-')
                for i in range(int(split[0]), int(split[1]) + 1):
                    pair_numbers.append(str(i))
            else:
                pair_numbers.append(pairs_string.replace(' ', ''))

            for pair_number in pair_numbers:
                try:
                    day_dict[pair_number][0] = change["changed_to"]
                    day_dict[pair_number][1] = "‚ö†Ô∏è–ó–ê–ú–ï–ù–ê‚ö†Ô∏è"
                    day_dict[pair_number][2] = change["classroom"]
                except:
                    day_dict[pair_number] = ['', '', '']
                    day_dict[pair_number][0] = change["changed_to"]
                    day_dict[pair_number][1] = "‚ö†Ô∏è–ó–ê–ú–ï–ù–ê‚ö†Ô∏è"
                    day_dict[pair_number][2] = change["classroom"]

    return f"<b>–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ {date.day}.{date.month}.{date.year} ({day_display_name})</b>\n\n" + get_day_schedule_text(day_dict)
